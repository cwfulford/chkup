#!/bin/bash
# $Id: chkup,v 1.93 2017/01/18 15:07:30 fulford Exp fulford $
# $Source: /src/merlin/usr/local/etc/RCS/chkup,v $
# $Revision: 1.93 $
# Author C W Fulford.
# Copyright 2014 (c) C W Fulford.
# Licensed for public use under the LGPL, .
# For assistance contact fulford@fulford.net 0709 229 5385
########################################################################
cmd=`basename $0`
syntax="$cmd [-c config] [-d(ebug)] [-l] [-r <email_rcpts>] [-v(erbose)] clientid"
trap 15 _end
while [ $# -gt 0 ] ;do
	case $1 in 
		-c) config=$2;shift 2;;	
		-d) debug=:;set -x;shift;;
		-l) log=:;shift;;
		-r) _rcpts=$2;shift 2;;
		-v) verbose=:;shift;;
		 *) clientid=$1;shift;;
	esac
done


if [ -z "$clientid" ];then
	echo $syntax >&2;
	exit 1
fi

config=${config:-"/usr/local/etc/chkup.cf"}

if [ ! -f $config ] ;then
		echo "$cmd: $config not found">&2
fi
lock=/tmp/$cmd.$clientid.lock
tcfg=/tmp/$cmd.t$$
tmp=/var/tmp/$cmd$$

[ -f $lock ] && {
	echo "$cmd: failed - $lock already set" >&2
	exit 1
}



if [ -f $config ];then
	if grep -e "^${clientid}:" $config >/dev/null ;then
		sed -ne '/^'$clientid':/,/^$/{
			/[\t ][^#]/p
		}' <$config >$tcfg
		. $tcfg
	else
		[ "$verbose" ] &&{
	      	 	echo "$cmd: can't find client id \"$clientid\" in $config" >&2
		}
		host=$clientid
	fi
fi

_end () {
	rm  $tmp 
	[ -f $tcfg ] && rm $tcfg
	exit $rval
}

getent hosts $host>/dev/null ||{
	echo "$cmd: can't resolve $host" >&2
	rval=1
	_end 
}

[ -n "$_rcpts" -a -n "$rcpts" ] && $rcpts="$rcpts,$_rcpts"
rcpts=${rcpts:-`id -nu`}

_alert () { case $1 in
		down) mailx -s "ALERT - $host port $ports down" $rcpts <$tmp ;;
		fail) mailx -s "ALERT - $host port $ports still down, giving up" $rcpts <$tmp ;;
		up) mailx -s "RECOVERED - $host port $ports" $rcpts <$tmp ;;
	     esac
	     [ "$log" ] && logger -t "$cmd:" "$host $ports $1"
	}



_up () { 
	if [ "$ports" ] ;then
		nmap -Pn -p$p $host >> $tmp
		for p in $ports;do
			state=`awk <$tmp '/'$p'/{print $3}'`
			if [ $state !~ /open/ ];then
				return $p
			fi
		done
	else
		nmap -Pn -sn $host >> $tmp
		state=`awk <$tmp '{if(/Host is up/){
						print "up"
					}else{
						print "down"
					}
				  }'`
		if [ $state ~ "up" ];then
			return 0
		else
			return 1
		fi
	fi
}
c=0
while ! _up  && [ $c -lt 10 ];do
	echo "$host port $p down" >&2
	[ ! -f $lock ] && _alert down
	touch $lock 
	sleep $((c++ * 60))
done
[ $verbose ] && cat $tmp
if [ -f $lock ] ;then
	#lock is only created if host was down
	echo "$cmd: $host down for 10 minutes! Giving up"
	_alert fail
	rm $lock
	rval=1	
else
	_alert up
	rval=0
fi
_end

######################################################################
# This program is free software: you can redistribute it and or      #
# modify it under the terms of the Lesser GNU General Public License #
# as published by the Free Software Foundation, either version 3 of  #
# the License, or (at your option) any later version.                #
#                                                                    #
# This program is distributed in the hope that it will be useful,    #
# but WITHOUT ANY WARRANTY; without even the implied warranty of     #    
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      #
# GNU General Public License for more details.                       #
#                                                                    # 
# A copy of the Lesser GNU General Public License and the GNU        #
# General Public License is available at                             #
# <http://www.gnu.org/licenses/>.                                    #
######################################################################
